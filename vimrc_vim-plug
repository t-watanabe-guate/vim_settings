set nocompatible
filetype off

"plug Script Start ----- under the construction
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-surround'
Plug 'fholgado/minibufexpl.vim'
Plug 'Shougo/unite.vim'
Plug 'vim-scripts/YankRing.vim'
Plug 'vim-scripts/rails.vim'
Plug 'vim-scripts/vim-coffee-script'
Plug 'pangloss/vim-javascript'
Plug 'othree/yajs.vim'
Plug 'tomasr/molokai'
call plug#end()
"plug Script E n d -----

filetype plugin indent on
syntax enable

colorscheme molokai

set expandtab
set autoread
set ambiwidth=double
set hidden
set ignorecase
set laststatus=2
set number
set shiftwidth=2
set showmatch
set smartcase
set softtabstop=0
set statusline=%<%f\%m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}%=%l,%c-%v%8p
set tabstop=2
set ttymouse=xterm2
set wildmode=longest:list

set encoding=utf-8
set fileencodings=utf-8,cp932,eucjp,iso2022jp
set fileformats=unix,dos,mac
set hlsearch
set cursorline
"highlight CursorLine ctermbg=Black
"set cursorcolumn
"highlight CursorColumn ctermbg=Blue

set nobk

nnoremap j gj
nnoremap k gk

nmap n nzz
nmap N Nzz
nmap * *zz
nmap g* g*zz
nmap g# g#zz

highlight EOLSpace ctermfg=red guifg=red
match EOLSpace /\s\+$/

augroup InsertHook
  au!
  au InsertEnter * highlight StatusLine ctermfg=red guifg=red
  au InsertLeave * highlight StatusLine ctermfg=white guifg=white
augroup END

" Qを無効化
nnoremap Q <Nop>


" Anywhre SID.
function! s:SID_PREFIX()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
endfunction

" Set tabline
function! s:my_tabline()
  let s = ''
  for i in range(1, tabpagenr('$'))
    let bufnrs = tabpagebuflist(i)
    let bufnr = bufnrs[tabpagewinnr(i) - 1]
    let no = i
    let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
    let title = fnamemodify(bufname(bufnr), ':t')
    let title = '[' . title . ']'
    let s .= '%'.i.'T'
    let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
    let s .= no . ':' . title
    let s .= mod
    let s .= '%#TabLineFill# '
  endfor
    let s .= '%#TabLineFill#%T%=%#TabLine#'
    return s
endfunction
let &tabline = '%!' . s:SID_PREFIX() . 'my_tabline()'
set showtabline=2  "always show tabline

" The prefix key.
nnoremap   [Tag]  <Nop>
nmap   t   [Tag]
" Tab jump
" t1 で一番左のタブ、t2で左から2番目のタブにジャンプ
for n in range(1, 9)
  execute 'nnoremap <silent> [Tag]'.n ':<C-u>tabnext'.n.'<CR>'
endfor

" tc 新タブを一番右に作成
map <silent> [Tag]c :tablast <bar> tabnew<CR>
" tx タブを閉じる
map <silent> [Tag]x :tabclose<CR>
" tn 次のタブ
map <silent> [Tag]n :tabnext<CR>
" tp 前のタブ
map <silent> [Tag]p :tabprevious<CR>

au BufRead,BufNewFile *.scss set filetype=sass

if $GOROOT != ''
  set rtp+=$GOROOT/misc/vim
endif

autocmd FileType go autocmd BufWritePre <buffer> Fmt
